<?php

namespace Proxies\__CG__\ReconBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Situation extends \ReconBundle\Entity\Situation implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'id', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'type', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'fonction', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'anneeExp', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'nomEntreprise', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'codePostal', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'ville', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'poleemploie', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'user', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'contrat', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'csp', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'etudes', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'taille'];
        }

        return ['__isInitialized__', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'id', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'type', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'fonction', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'anneeExp', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'nomEntreprise', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'codePostal', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'ville', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'poleemploie', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'user', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'contrat', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'csp', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'etudes', '' . "\0" . 'ReconBundle\\Entity\\Situation' . "\0" . 'taille'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Situation $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setFonction($fonction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFonction', [$fonction]);

        return parent::setFonction($fonction);
    }

    /**
     * {@inheritDoc}
     */
    public function getFonction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFonction', []);

        return parent::getFonction();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnneeExp($anneeExp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnneeExp', [$anneeExp]);

        return parent::setAnneeExp($anneeExp);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnneeExp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnneeExp', []);

        return parent::getAnneeExp();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomEntreprise($nomEntreprise)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomEntreprise', [$nomEntreprise]);

        return parent::setNomEntreprise($nomEntreprise);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomEntreprise()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomEntreprise', []);

        return parent::getNomEntreprise();
    }

    /**
     * {@inheritDoc}
     */
    public function setCodePostal($codePostal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCodePostal', [$codePostal]);

        return parent::setCodePostal($codePostal);
    }

    /**
     * {@inheritDoc}
     */
    public function getCodePostal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCodePostal', []);

        return parent::getCodePostal();
    }

    /**
     * {@inheritDoc}
     */
    public function setVille($ville)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVille', [$ville]);

        return parent::setVille($ville);
    }

    /**
     * {@inheritDoc}
     */
    public function getVille()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVille', []);

        return parent::getVille();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\ReconBundle\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setContrat(\ReconBundle\Entity\Contrat $contrat = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContrat', [$contrat]);

        return parent::setContrat($contrat);
    }

    /**
     * {@inheritDoc}
     */
    public function getContrat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContrat', []);

        return parent::getContrat();
    }

    /**
     * {@inheritDoc}
     */
    public function setCSP(\ReconBundle\Entity\CSP $csp = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCSP', [$csp]);

        return parent::setCSP($csp);
    }

    /**
     * {@inheritDoc}
     */
    public function getCSP()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCSP', []);

        return parent::getCSP();
    }

    /**
     * {@inheritDoc}
     */
    public function setEtudes(\ReconBundle\Entity\Etudes $etudes = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEtudes', [$etudes]);

        return parent::setEtudes($etudes);
    }

    /**
     * {@inheritDoc}
     */
    public function getEtudes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEtudes', []);

        return parent::getEtudes();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaille(\ReconBundle\Entity\Taille $taille = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaille', [$taille]);

        return parent::setTaille($taille);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaille()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaille', []);

        return parent::getTaille();
    }

    /**
     * {@inheritDoc}
     */
    public function setPoleemploie($poleemploie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPoleemploie', [$poleemploie]);

        return parent::setPoleemploie($poleemploie);
    }

    /**
     * {@inheritDoc}
     */
    public function getPoleemploie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPoleemploie', []);

        return parent::getPoleemploie();
    }

}
